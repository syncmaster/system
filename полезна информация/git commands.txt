 $ git init [projectn name] създаване на нов локално хранилище
 $ git it clone my_url сваляне от съществуващо хранилище
 $ git status показване на нови или модифицирани файлове,които не са ангажирани
 $ git diff показване на промените към файловете ,които не са на етапи
 $ git diff --cached показване на промените на файловете
 $ git diff HEAD show all staged and unstaged file changes
 $ git diff commit1 commit2 show the changes between two commit ids
 $ git blame [file] list the change dates and authors for a file
 $ git show [commit]:[file] show the file changes for a commit id and/or file
 $ git log - show full change history
 $git log -p [file/directory] show change history for file/directory including diffs

https://blog.superhosting.bg/meet-git.html

Основни понятия в GIT: 

 - Директорията на проекта е обикновено т.нар. "работна директория" или working area directory. Промените се правят там, като обикновено тази директория се зарежда и през уеб сървъра за тестване. В тази директория има скрита директория .git/ 
 - Промяната по проекта маркираме с т.нар. "commit". Commit-а има задължително заглавие, а може да съдържа и опционално по подробно съобщение.
 Тези комити имат уникален идентификатор с SHA-1 код, като също така съхраняват датата и часът на промяната, както и авторът на промяната (съхранява се и т.нар. commiter, т.е. човекът който е направил commit-а, но в повечето случаи това поле съдържа същите данни като author) 
 - Преди commit-ване на промените, файловете трябва да се добавят в т.нар. междиннен слой, наречен "stage". Само файловете (или променените редове от тези файлове), добавени в този stage, след това могат да се commit-нат. 
 - Commit-ите се съхраняват в базата данни на git, което е в тази скрита .git/ директория. Тази директория не трябва да се пипа по принцип. Съхранените commit-и са само локално! 
 - Хранилище е както .git/ директорията, вътре в проекта, така и ако се ползва GitHub/BitBucket или други подобни системи, т.е. отдалечени сървъри, където се съхраняват промените по проекта до момента.
 Всички локални commit-и следва да се "изпратят" или "изтласкат" към тези отдалечени хранилища с цел другите програмисти да видят промените. 

Основните команди за GIT: 

- при нова директория с код, за да се инициализира хранилище (т.е. да се създаде .git скритата директория), се извиква командата: git init в директорията с проекта. 
- ако има създадено отдалечено хранилище (от сървър) – git clone <URL-на-проекта-в-хранилището>  Самият URL адрес зависи как се работи с хранилището 
- git add . (С точка) – добавя всички нови и променени файлове в stage. Този stage е междинно състояние на файловете след промените и преди създаването на commit.
 Тази команда да се избягва, понеже хваща и файловете, които не би трябвало да се добавят. 
- git add <path/file> – добавя индивидуален файл в stage-а, вместо всички налични. 
- git reset . (отново, с точка) или git reset <path/file> – обратното на git add . / <path/file> – изкарва файла от stage, така че той няма да се commit-не. 
- git checkout -- <path/file> (има две къси чертички преди <path/file>) – подобно на git reset, но връща всички направени промени спрямо предишната commit-ната версия на избрания файл. 
Тази команда може да изтрие текущите промени в този файл! Също, командата може да се използва при преминаване от т.нар. разклонение на кода (branch) към друго или към конкретен commit (по SHA1 ID-то му), но това по-късно... 
- git rm <file> – маркираме файл за триене, така че в следващия commit да не присъства повече в работната директория. 
- git commit – всяка индивидуална промяна накрая завършваме с тази команда. Необходимо е да има поне един добавен файл с "git add" (или добавен ред с промяна в някой файл) и в съобщението да присъства поне заглавие.
 В един commit може да има няколко промени от един или няколко файла, включително маркирани файлове за триене. 
- git mv <old-file> <new-file> – преименуваме даден файл от old-file на new-file. Еквивалетно е на "местене" (за UNIX системите, двете неща са едно и също действие, за това командата е "mv" а не "rename" примерно) 
- git status – показва в червено кои файлове са нови или променени, в зелено – кои са в т.нар. stage (готови за commit-ване). 
- git gui – графичен инструмент за по-лесно добавяне на индивидуални файлове. До някъде замества git add / rm / reset. 
- git remote add / git remote remove / git remote -v – група от команди, с които се променя отдалеченото хранилище на проекта (URL)... 
- git log – показва направените commits до сега 
- gitk – същото като git log, но е графично, може да се напише и "gitk --all", като така ще покаже всички налични бранчове/разклонения, не само текущия 
- git branch <name> – създава нов бранч/разклонение спрямо текущия commit в текущия branch. Обикновено, основният branch в git е "master". 
- git checkout <branch-name> – преминава към новия бранч, в последня commit там 
- git checkout <SHA-1 номер> – преминава към зададения от SHA-1 номер commit, независимо в кой бранч е той 
- git merge <branch> – прави опит за сливане на промените, направени от <branch> разклонението, в текущо избрания 
- git rebase – тази команда прави различни операции в зависимост от това какви параметри й се подадат. По принцип може да замести частично "merge", може да променя старо-направени вече commit-и и много други неща.
 На практика вътрешно почти всяка GIT команда прави "rebase" в някаква степен. 
- git fetch – взима последно направените в отдалаченото хранилище промени (последните commit-и от там) които не са налични локално и ги добавя в нов бранч. 
- git pull или git pull --rebase – взима последно направените в отдалаченото хранилище промени (последните commit-и от там) които не са налични локално и ги слива в текущия бранч.
 Втората команда е за предпочитне, тъй като не прави т.нар. "bubble" или "балончета", които стават обикновенно при ползването на git merge. git pull прави всъщност две неща – git fetch <remote-branch> & git merge  <remote-branch>, или когато се използва с --rebase – git fetch & git rebase.
 Почти винаги преди работа трябва да се пише "git pull --rebase", особено ако по проекта работят и други програмисти. 
- git push - "изтласква" направените локално commit-и към отдалеченото хранилище. Възможно е промените да не се приемат от сървъра, понеже някой друг може да е качил своите commit-и, за това вместо git pull трябва да се ползва git pull --rebase. 

За сега това са основните команди.  Приятно четене. 

sledva jerarhiq vseki commit 

комита до 80 символа 
почва се с глагол

1 стъпка ---- git status;
2 стъпка -----
